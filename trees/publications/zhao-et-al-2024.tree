\title{Total Type Error Localization and Recovery with Holes}
\author{ericczhao}
\author{raefmaroof}
\author{ananddukkipati}
\author{andrewblinn}
\author{zhiyipan}
\author{cyrusomar}
\taxon{reference}
\date{2024-01-05}

\tag{distinguished}
\tag{featured}

\meta{doi}{10.1145/3632910}
\meta{venue}{[[popl-2024]]}

\p{Type systems typically only define the conditions under which an expression is well-typed, leaving ill-typed expressions formally meaningless. This approach is insufficient as the basis for language servers driving modern programming environments, which are expected to recover from simultaneously localized errors and continue to provide a variety of downstream semantic services. This paper addresses this problem, contributing the first comprehensive formal account of total type error localization and recovery: the marked lambda calculus. In particular, we define a gradual type system for expressions with marked errors, which operate as non-empty holes, together with a total procedure for marking arbitrary unmarked expressions. We mechanize the metatheory of the marked lambda calculus in Agda and implement it, scaled up, as the new basis for [[zzhaoe-000A]], a full-scale live functional programming environment with, uniquely, no meaningless editor states.}

\p{The marked lambda calculus is bidirectionally typed, so localization decisions are systematically predictable based on a local flow of typing information. Constraint-based type inference can bring more distant information to bear in discovering inconsistencies but this notoriously complicates error localization. We approach this problem by deploying constraint solving as a type-hole-filling layer atop this gradual bidirectionally typed core. Errors arising from inconsistent unification constraints are localized exclusively to type and expression holes, i.e. the system identifies unfillable holes using a system of traced provenances, rather than localized in an ad hoc manner to particular expressions. The user can then interactively shift these errors to particular downstream expressions by selecting from suggested partially consistent type hole fillings, which returns control back to the bidirectional system. We implement this type hole inference system in [[zzhaoe-000A]].}
